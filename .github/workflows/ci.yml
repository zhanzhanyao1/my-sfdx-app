
name: Salesforce CI

on:
  pull_request:
    branches:
      - develop
      - staging
      - main

jobs:
  validate_and_test:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ 缓存依赖，提高 CI 执行效率
      - name: Cache NPM dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      # 2️⃣ 检出代码
      - name: Checkout code
        uses: actions/checkout@v3

      # 3️⃣ 设置 Salesforce 环境变量
      - name: Set Salesforce env variables
        id: set-env
        run: |
          if [[ "${{ github.head_ref }}" == "develop" ]]; then
            echo "SF_ENV=QA" >> $GITHUB_ENV
            echo "SF_USERNAME=${{ secrets.QA_SF_USERNAME }}" >> $GITHUB_ENV
            echo "SF_CLIENT_ID=${{ secrets.QA_SF_CLIENT_ID }}" >> $GITHUB_ENV
            echo "SF_JWT_KEY<<EOF" >> $GITHUB_ENV
            echo "${{ secrets.QA_SF_JWT_KEY }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "SF_LOGIN_URL=${{ secrets.QA_SF_LOGIN_URL }}" >> $GITHUB_ENV
          elif [[ "${{ github.head_ref }}" == "staging" ]]; then
            echo "SF_ENV=STAGING" >> $GITHUB_ENV
            echo "SF_USERNAME=${{ secrets.STAGING_SF_USERNAME }}" >> $GITHUB_ENV
            echo "SF_CLIENT_ID=${{ secrets.STAGING_SF_CLIENT_ID }}" >> $GITHUB_ENV
            echo "SF_JWT_KEY<<EOF" >> $GITHUB_ENV
            echo "${{ secrets.STAGING_SF_JWT_KEY }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "SF_LOGIN_URL=${{ secrets.STAGING_SF_LOGIN_URL }}" >> $GITHUB_ENV
          elif [[ "${{ github.head_ref }}" == "master" ]]; then
            echo "SF_ENV=PROD" >> $GITHUB_ENV
            echo "SF_USERNAME=${{ secrets.PROD_SF_USERNAME }}" >> $GITHUB_ENV
            echo "SF_CLIENT_ID=${{ secrets.PROD_SF_CLIENT_ID }}" >> $GITHUB_ENV
            echo "SF_JWT_KEY<<EOF" >> $GITHUB_ENV
            echo "${{ secrets.PROD_SF_JWT_KEY }}" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
            echo "SF_LOGIN_URL=${{ secrets.PROD_SF_LOGIN_URL }}" >> $GITHUB_ENV
          else
            echo "Branch not supported for CI"
            exit 1
          fi

      # 4️⃣ 安装 Salesforce CLI
      - name: Setup Salesforce CLI
        uses: amtrack/sfdx-action@v1
        with:
          version: latest

      # 5️⃣ JWT 登录 Salesforce
      - name: Authenticate to Salesforce using JWT
        run: |
          echo "${SF_JWT_KEY}" > server.key
          chmod 600 server.key
          sfdx auth:jwt:grant --clientid $SF_CLIENT_ID --jwtkeyfile server.key --username $SF_USERNAME --setdefaultusername --instanceurl $SF_LOGIN_URL

      # 6️⃣ 验证部署（check-only）
      - name: Validate deployment (check-only)
        run: |
          sfdx force:source:deploy -p force-app/main/default -w 10 --checkonly

      # 7️⃣ 运行 Apex 测试并导出结果（JUnit + JSON）
      - name: Run Apex tests
        run: |
          mkdir -p test-results coverage
          sfdx force:apex:test:run --wait 10 --resultformat junit --codecoverage --testlevel RunLocalTests --outputdir test-results
          sfdx force:apex:test:report --wait 10 --resultformat json --codecoverage --outputdir coverage

      # 8️⃣ PMD 静态扫描
      - name: Run PMD static code analysis
        run: |
          npm install -g pmd-bin
          pmd-bin run --dir force-app --rulesets apex-rules.xml --reportfile pmd-report.xml

      # 9️⃣ 打包 Salesforce metadata
      - name: Convert and Package Salesforce Metadata
        run: |
          mkdir -p deploy-package
          sfdx force:source:convert -r force-app -d deploy-package
          zip -r deploy-package.zip deploy-package

      # 🔟 上传构建结果 artifact（测试 + 覆盖率 + PMD + metadata package）
      - name: Upload Build Artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: salesforce-ci-artifacts-${{ env.SF_ENV }}
          path: |
            test-results/
            coverage/
            pmd-report.xml
            deploy-package.zip

      # 1️⃣1️⃣ SonarQube 扫描（质量门控）
      - name: Run SonarQube Scan
        uses: sonarsource/sonarcloud-github-action@v2
        with:
          projectKey: ${{ secrets.SONAR_PROJECT_KEY }}
          organization: ${{ secrets.SONAR_ORG }}
          token: ${{ secrets.SONAR_TOKEN }}
          extraProperties: |
            sonar.sources=force-app
            sonar.tests=force-app
            sonar.test.inclusions=**/*Test.cls
            sonar.language=apex
            sonar.junit.reportPaths=test-results/**/*.xml
            sonar.javascript.lcov.reportPaths=coverage/lcov.info
            sonar.qualitygate.wait=true
